/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.brunooliveira.jaya.wishlistrestapi.rest.impl;

import br.com.brunooliveira.jaya.wishlistrestapi.dto.ProdutoDTO;
import br.com.brunooliveira.jaya.wishlistrestapi.dto.WishListDTO;
import br.com.brunooliveira.jaya.wishlistrestapi.rest.WishlistApi;
import br.com.brunooliveira.jaya.wishlistrestapi.service.WishlistService;
import br.com.brunooliveira.jaya.wishlistrestapi.util.Util;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

@RestController
@RequestMapping
class WishlistApiImpl implements WishlistApi {

    private static final Logger LOGGER = LoggerFactory.getLogger(WishlistApiImpl.class);

    @Autowired
    WishlistService wishlistService;



    @Override

    public   Mono<ResponseEntity<Void>> deleteProduto(String userId, String produtoId,   ServerWebExchange exchange) {
        String requestId = Util.generateRequestId();
        LOGGER.info("[{}] deleteProduto Request produtoId: {}",requestId,produtoId);
        return wishlistService.deleteProduto(requestId,userId, produtoId, exchange).map(item -> {
            LOGGER.info("[{}] getWishListByUsuarioId response status: {}  ",requestId,item.getStatusCode());

            return item ;
        });

    }


    @Override
    public Mono<ResponseEntity<WishListDTO>> getWishListByUsuarioId(String userId,   ServerWebExchange exchange) {
        String requestId = Util.generateRequestId();
        LOGGER.info("[{}] Request getWishListByUsuarioId userId: {} ",requestId,userId);
        return wishlistService.getWishListByUsuarioId(requestId,userId, exchange).map(item -> {
            LOGGER.info("[{}] response getWishListByUsuarioId status: {} body: {} ",requestId,item.getStatusCode(),item.getBody());

            return item ;
        });
    }


    @Override
    public Mono<ResponseEntity<ProdutoDTO>> getProdutoByUsuarioIdAndProdutoId(String userId, String produtoId, ServerWebExchange exchange) {
        String requestId = Util.generateRequestId();
        LOGGER.info("[{}] Request getWishListByUsuarioIdAndProdutoId userId: {} produtoId: {}",requestId,userId,produtoId);
        return wishlistService.getProdutoByUsuarioIdAndProdutoId(requestId,userId, produtoId, exchange).map(item -> {
            LOGGER.info("[{}] response getWishListByUsuarioIdAndProdutoId status: {} body: {} ",requestId,item.getStatusCode(),item.getBody());

            return item ;
        });
    }


    @Override
    public Mono<ResponseEntity<ProdutoDTO>>  postProduto(String userId, ProdutoDTO produtoDTO,   ServerWebExchange exchange) {
        String requestId = Util.generateRequestId();
        LOGGER.info("[{}] Request postProduto userId: {} produtoDTO: {}",requestId,userId,produtoDTO);
        return wishlistService.postProduto(requestId,userId, produtoDTO, exchange).map(item -> {
            LOGGER.info("[{}] response postProduto status: {} body: {} ",requestId,item.getStatusCode(),item.getBody());

            return item ;
        });
    }


    @Override

    public   Mono<ResponseEntity<Void>> deleteCache(String userId,    ServerWebExchange exchange) {
        String requestId = Util.generateRequestId();
        LOGGER.info("[{}] deleteCache Request userId: {}",requestId,userId);
        return wishlistService.deleteCache(requestId,userId, exchange).map(item -> {
            LOGGER.info("[{}] deleteCache response status: {}  ",requestId,item.getStatusCode());

            return item ;
        });

    }




}
