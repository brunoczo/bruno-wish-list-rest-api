/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.brunooliveira.jaya.wishlistrestapi.rest;

import br.com.brunooliveira.jaya.wishlistrestapi.dto.ProdutoDTO;
import br.com.brunooliveira.jaya.wishlistrestapi.dto.WishListDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import javax.validation.Valid;

@Tag(name = "wishlist", description = "the Wishlist API")
public interface WishlistApi {

    /**
     * DELETE /wishlist/{userId}/{produtoId} : Remove um produto
     * Remove um produto
     *
     * @param userId ID do usuário (required)
     * @param produtoId ID do produto (required)
     * @return Produto removido com sucesso (status code 200)
     *         or Produto ou usuário não encontrado (status code 404)
     *         or Erro ao executar serviço (status code 501)
     */
    @Operation(
        operationId = "deleteProduto",
        summary = "Remove um produto",
        tags = { "wishlist" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Produto removido com sucesso"),
            @ApiResponse(responseCode = "404", description = "Produto ou usuário não encontrado"),
            @ApiResponse(responseCode = "501", description = "Erro ao executar serviço")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/wishlist/{userId}/{produtoId}"
    )
     Mono<ResponseEntity<Void>> deleteProduto(
        @Parameter(name = "userId", description = "ID do usuário", required = true, schema = @Schema(description = "")) @PathVariable("userId") String userId,
        @Parameter(name = "produtoId", description = "ID do produto", required = true, schema = @Schema(description = "")) @PathVariable("produtoId") String produtoId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) ;


    /**
     * GET /wishlist/{userId} : Busca wishlist
     * Returns lista de produtos
     *
     * @param userId ID do usuário (required)
     * @return Consulta realizada com sucesso (status code 200)
     *         or Nenhuma lista de dados encontrada (status code 404)
     *         or Erro ao executar serviço (status code 501)
     */
    @Operation(
        operationId = "getWishListByUsuarioId",
        summary = "Busca wishlist",
        tags = { "wishlist" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Consulta realizada com sucesso", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  WishListDTO.class))),
            @ApiResponse(responseCode = "404", description = "Nenhuma lista de dados encontrada"),
            @ApiResponse(responseCode = "501", description = "Erro ao executar serviço")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/wishlist/{userId}",
        produces = { "application/json" }
    )
     Mono<ResponseEntity<WishListDTO>> getWishListByUsuarioId(
        @Parameter(name = "userId", description = "ID do usuário", required = true, schema = @Schema(description = "")) @PathVariable("userId") String userId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) ;




    /**
     * GET /wishlist/{userId}/{produtoId} : Busca um Produto
     * Retorna um produto
     *
     * @param userId ID do usuário (required)
     * @param produtoId ID do produto (required)
     * @return Consulta realizada com sucesso (status code 200)
     *         or Produto ou usuário não encontrado (status code 404)
     *         or Erro ao executar serviço (status code 501)
     */
    @Operation(
        operationId = "getWishListByUsuarioIdAndProdutoId",
        summary = "Busca um Produto",
        tags = { "wishlist" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Consulta realizada com sucesso", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ProdutoDTO.class))),
            @ApiResponse(responseCode = "404", description = "Produto ou usuário não encontrado"),
            @ApiResponse(responseCode = "501", description = "Erro ao executar serviço")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/wishlist/{userId}/{produtoId}",
        produces = { "application/json" }
    )
     Mono<ResponseEntity<ProdutoDTO>> getProdutoByUsuarioIdAndProdutoId(
        @Parameter(name = "userId", description = "ID do usuário", required = true, schema = @Schema(description = "")) @PathVariable("userId") String userId,
        @Parameter(name = "produtoId", description = "ID do produto", required = true, schema = @Schema(description = "")) @PathVariable("produtoId") String produtoId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) ;


    /**
     * POST /wishlist/{userId} : Faz o cadastro de um Prodto
     *
     * @param userId ID do usuário (required)
     * @param produtoDTO Novo produto (optional)
     * @return Produto criado com sucesso (status code 201)
     *         or O produto não pode ser salvo, limite de produto por cliente já alcançado (status code 422)
     *         or Erro ao executar serviço (status code 501)
     */
    @Operation(
        operationId = "postProduto",
        summary = "Faz o cadastro de um Prodto",
        tags = { "wishlist" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Produto já cadastrado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ProdutoDTO.class))),
            @ApiResponse(responseCode = "201", description = "Produto criado com sucesso", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ProdutoDTO.class))),
            @ApiResponse(responseCode = "422", description = "O produto não pode ser salvo, limite de produto por cliente já alcançado"),
            @ApiResponse(responseCode = "501", description = "Erro ao executar serviço")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/wishlist/{userId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
     Mono<ResponseEntity<ProdutoDTO>> postProduto(
        @Parameter(name = "userId", description = "ID do usuário", required = true, schema = @Schema(description = "")) @PathVariable("userId") String userId,
        @Parameter(name = "ProdutoDTO", description = "Novo produto", schema = @Schema(description = "")) @Valid @RequestBody(required = false) ProdutoDTO produtoDTO,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) ;



    /**
     * DELETE /wishlist/cleanCache/{userId} : Remove cache
     * Remove cache
     *
     * @param userId ID do usuário (required)
     * @return Cache removido com sucesso (status code 200)
     *         or Produto ou usuário não encontrado (status code 404)
     *         or Erro ao executar serviço (status code 501)
     */
    @Operation(
            operationId = "deleteCache",
            summary = "Remove um produto",
            tags = { "wishlist" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "Cache removido com sucesso"),
                    @ApiResponse(responseCode = "404", description = "Produto ou usuário não encontrado"),
                    @ApiResponse(responseCode = "501", description = "Erro ao executar serviço")
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/wishlist/deleteCache/{userId}"
    )
    Mono<ResponseEntity<Void>> deleteCache(
            @Parameter(name = "userId", description = "ID do usuário", required = true, schema = @Schema(description = "")) @PathVariable("userId") String userId,
            @Parameter(hidden = true) final ServerWebExchange exchange
    ) ;



}
